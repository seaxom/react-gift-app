{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","components/hooks/useFechGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACVC,mBAAS,IADC,mBACvCC,EADuC,KAC3BC,EAD2B,KAgB9C,OACI,0BAAMC,SAVW,SAACC,GACpBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,OAOd,2BAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAflB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,Y,uBCPdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAUH,GAF9C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,qBAVN,kBAeZN,GAfY,4CAAH,sDCGPO,EAAc,SAAC,GAAwB,IAAvBJ,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAIpC,OAFIc,QAAQC,IAAI,CAACN,KAAIC,QAAOV,QAGxB,yBAAKgB,UAAU,wCACZ,yBAAKC,IAAMjB,EAAIA,IAAKkB,IAAKR,IACzB,2BAAIA,KCHFS,EAAU,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAAc,ECFX,SAACA,GAAa,IAAD,EAEXd,mBAAS,CAC/BqB,KAAK,GACLe,SAAQ,IAJyB,mBAE9BC,EAF8B,KAEvBC,EAFuB,KAsBrC,OAfAC,qBAAU,WAEN1B,EAAQC,GACP0B,MAAM,SAAAC,GACHH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAIlB,CAACtB,IAKGuB,EDlB0BK,CAAa5B,GAAjCa,EAFsB,EAE3BN,KAAae,EAFc,EAEdA,QAErB,OACI,kBAAC,WAAD,KACA,4BAAKtB,GAEJsB,EAAU,sCAAgB,KAC3B,yBAAKJ,UAAU,aACX,4BAGQL,EAAOJ,KAAI,SAAAC,GAAG,OACd,kBAAC,EAAD,eACImB,IAAOnB,EAAIC,IACND,WEnBhBoB,EAAe,WAAO,IAAD,EACI5C,mBAAS,CAAC,cADd,mBACzB6C,EADyB,KACb9C,EADa,KAGhC,OACE,kBAAC,WAAD,KACE,4CAEA,kBAAC,EAAD,CAAaA,cAAeA,IAE5B,6BACA,4BACG8C,EAAWtB,KAAI,SAACT,GAAD,OACd,kBAAC,EAAD,CACE6B,IAAO7B,EACPA,SAAUA,U,YCZtBgC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.a1271de0.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setCategories}) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if(inputValue.trim().length > 2){\n        setCategories( cats => [inputValue, ...cats]);\n        setInputValue('');\n    }\n   \n  };\n\n  return (\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" value={inputValue} onChange={handleInputChange} />\n      </form>\n  );\n};\n\n\nAddCategory.propTypes ={\n    setCategories: PropTypes.func.isRequired\n}\n","export const getGifs = async (category) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=6KbLR6ScxJF1JeOmjXQb5wT34dEfgdBu`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n\n    const gifs = data.map (img => {\n        return{\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium\n        }\n    })\n\n    \n    return gifs;\n}","import React from 'react';\n\n\nexport const GifGridItem = ({id, title, url } ) => {\n\n        console.log({id, title, url})\n\n    return (\n        <div className=\"animate__animated animate__headShake\">\n           <img src ={url.url} alt={title} />\n           <p>{title}</p>\n        </div>\n    )\n}\n","import React, {Fragment} from 'react';\nimport { useFetchGifs } from './hooks/useFechGifs';\nimport { GifGridItem } from './GifGridItem';\n\n\n\n\nexport const GifGrid = ({category}) => {\n\n     const {data:images, loading}  = useFetchGifs(category);\n\n    return (\n        <Fragment>\n        <h3>{category}</h3>\n\n        {loading ? <p>Loading</p>: null}\n        <div className=\"card-grid\">\n            <ol>\n\n                {\n                    images.map(img => (\n                    <GifGridItem \n                        key = {img.id}\n                        {... img}\n                         ></GifGridItem>\n                    ))\n                    }\n            </ol>\n            \n        </div>\n        </Fragment>\n    )\n}\n","import { useState, useEffect } from \"react\"\nimport { getGifs } from \"../../helpers/getGifs\";\n\n\n\nexport const useFetchGifs = (category) =>{\n\n    const [state, setstate] = useState({\n        data:[],\n        loading:true\n    });\n    \n    useEffect(() => {\n\n        getGifs(category)\n        .then( imgs => {\n            setstate({\n                data: imgs,\n                loading: false\n            })\n        })\n             \n    }, [category])\n\n\n\n\n    return state;\n}","import React, { Fragment, useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport {GifGrid} from './components/GifGrid'\n\nexport const GifExpertApp = () => {\n  const [categories, setCategories] = useState([\"One punch\"]);\n\n  return (\n    <Fragment>\n      <h2>GifExpertApp</h2>\n\n      <AddCategory setCategories={setCategories} />\n\n      <hr />\n      <ol>\n        {categories.map((category) => (\n          <GifGrid\n            key = {category}\n            category={category}></GifGrid>\n        ))}\n      </ol>\n    </Fragment>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp} from './GifExpertApp';\nimport './index.css';\nimport 'animate.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}